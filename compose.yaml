version: '3.7'
services:
  users:
    build:
      context: .
      dockerfile: ./apps/users/Dockerfile
      target: development
    command: npm run start:dev users
    networks:
      - mongo-cluster
      - message-broker
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
    depends_on:
      - mongodb-init
      - rabbitmq
      - notification

  notification:
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
      target: development
    command: npm run start:dev notification
    networks:
      - mongo-cluster
      - message-broker
    env_file:
      - .env
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - mongodb-init
      - rabbitmq


  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
    networks:
      - message-broker
  mongodb-primary:
    container_name: ${MONGODB_PRIMARY_NAME}
    hostname: ${MONGODB_PRIMARY_NAME}
    image: mongo:7.0.2
    networks:
      - mongo-cluster
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - 'mongodb_data:/data/mongodb_primary'
      - ${REPLICA_KEY_HOST_PATH}:/${REPLICA_KEY_MOUNT_PATH}
    expose:
      - ${MONGODB_PORT}
    ports:
      - 30001:${MONGODB_PORT} 
    restart: always
    command: mongod --bind_ip_all --replSet ${MONGODB_REPLICA_SET_KEY} --keyFile ${REPLICA_KEY_MOUNT_PATH}

  mongodb-secondary:
    container_name: ${MONGODB_SECONDARY_NAME}
    hostname: ${MONGODB_SECONDARY_NAME}
    image: mongo:7.0.2
    networks:
      - mongo-cluster
    volumes:
      - 'mongodb_data:/data/mongodb_secondary'
      - ${REPLICA_KEY_HOST_PATH}:/${REPLICA_KEY_MOUNT_PATH}
    expose:
      - ${MONGODB_PORT}
    ports:
      - 30002:27017 
    restart: always  
    command: mongod --bind_ip_all --replSet ${MONGODB_REPLICA_SET_KEY} --keyFile ${REPLICA_KEY_MOUNT_PATH}
  
  mongodb-arbiter:
    container_name: ${MONGODB_ARBITER_NAME}
    hostname: ${MONGODB_ARBITER_NAME}
    image: mongo:7.0.2
    networks:
      - mongo-cluster
    volumes:
      - ${REPLICA_KEY_HOST_PATH}:/${REPLICA_KEY_MOUNT_PATH}
    expose:
      - ${MONGODB_PORT}
    ports:
      - 30003:${MONGODB_PORT}
    restart: always
    command: mongod --bind_ip_all --replSet ${MONGODB_REPLICA_SET_KEY} --keyFile ${REPLICA_KEY_MOUNT_PATH}

  mongodb-init:
    image: mongo:7.0.2
    restart: on-failure
    volumes:
      - ./scripts/mongodb_rs_init.sh:/scripts/mongodb_rs_init.sh
    networks:
      - mongo-cluster
    env_file:
      - .env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
    entrypoint: ["/bin/bash", "/scripts/mongodb_rs_init.sh"]     

networks:
  mongo-cluster:
    driver: bridge
  message-broker:
    driver: bridge

volumes:
  mongodb_data:
    driver: local

